#!/usr/bin/env bash
#
# Summary: 显示命令帮助
#
# Usage: sx help [--usage] COMMAND

set -e
[ -n "$SX_DEBUG" ] && set -x

# Provide sx completions
if [ "$1" = "--complete" ]; then
  args=("$@")
  idx=$(( $# - 1 ))
  prev=
  while [ $idx -gt 0 ]; do
    if [[ "${args[idx]}" = -* ]]; then
      idx=$(( idx - 1 ))
    else
      prev="${args[idx]}"
      break
    fi
  done

  if [ $# -eq 1 ]; then
    echo --usage
  fi
  if [ $idx -eq 0 ]; then
    exec sx-commands
  fi
  exit 0
fi

command_path() {
  local command="$1"
  command -v sx-"$command" || true
}

extract_initial_comment_block() {
  sed -ne "
    /^#/ !{
      q
    }

    s/^#$/# /

    /^# / {
      s/^# //
      p
    }
  "
}

collect_documentation() {
  $(type -p gawk awk | head -1) '
    /^Summary:/ {
      summary = substr($0, 10)
      next
    }

    /^Usage:/ {
      reading_usage = 1
      usage = usage "\n" $0
      next
    }

    /^( *$|       )/ && reading_usage {
      usage = usage "\n" $0
      next
    }

    {
      reading_usage = 0
      help = help "\n" $0
    }

    function escape(str) {
      gsub(/[`\\$"]/, "\\\\&", str)
      return str
    }

    function trim(str) {
      sub(/^\n*/, "", str)
      sub(/\n*$/, "", str)
      return str
    }

    END {
      if (usage || summary) {
        print "summary=\"" escape(summary) "\""
        print "usage=\"" escape(trim(usage)) "\""
        print "help=\"" escape(trim(help)) "\""
      }
    }
  '
}

documentation_for() {
  case "$1" in
    lua|luac|skynet)
      echo "summary='执行 $1'"
      echo "usage='sx $1 [<$1-args>]'"
      ;;
    exec)
      echo "summary='执行任意命令，Lua 和 Skynet 执行的环境变量都已经装备好'"
      echo "usage='sx <command> [<args>]'"
      ;;
    env)
      echo "summary='返回环境变量，使用 eval 可以更方便直接掉用 lua, skynet 等命令'"
      echo "usage='sx env'"
      ;;
    *)
      local filename="$(command_path "$1")"
      if [ -n "$filename" ]; then
        extract_initial_comment_block < "$filename" | collect_documentation
      fi
      ;;
  esac
}

print_summary() {
  local command="$1"
  local summary usage help
  eval "$(documentation_for "$command")"

  if [ -n "$summary" ]; then
    printf "   %-9s   %s\n" "$command" "$summary"
  fi
}

print_summaries() {
  for command; do
    print_summary "$command"
  done
}

print_help() {
  local command="$1"
  local summary usage help
  eval "$(documentation_for "$command")"
  [ -n "$help" ] || help="$summary"

  if [ -n "$usage" -o -n "$summary" ]; then
    if [ -n "$usage" ]; then
      echo "$usage"
    else
      echo "Usage: sx ${command}"
    fi
    if [ -n "$help" ]; then
      echo
      echo "$help"
      echo
    fi
  else
    echo "此命令暂时无文档" >&2
    return 1
  fi
}

print_usage() {
  local command="$1"
  local summary usage help
  eval "$(documentation_for "$command")"
  [ -z "$usage" ] || echo "$usage"
}

unset usage
if [ "$1" = "--usage" ]; then
  usage="1"
  shift
fi

if [ -z "$1" ] || [ "$1" == "sx" ]; then
  echo "Usage: sx [-f <file>] <command> [<args>]"
  [ -z "$usage" ] || exit
  echo
  echo "-f <file> 从文件中读取环境变量，默认当前目录下的 .env"
  echo "          指定 NONE 将不从任何文件读取环境变量"
  echo
  echo "一些常用命令如下："
  print_summaries new new-app skynet lua commands
  echo
  echo "运行 \`sx help <command>' 查看某个命令的文档。"
else
  command="$1"
  if [ "$command" = "lua" ] || [ "$command" = "luac" ] || [ "$command" = "skynet" ] \
    || [ "$command" = "env" ] || [ "$command" = "exec" ] \
    || [ -n "$(command_path "$command")" ]; then
    if [ -n "$usage" ]; then
      print_usage "$command"
    else
      print_help "$command"
    fi
  else
    echo "sx: 无此命令 \`$command'" >&2
    exit 1
  fi
fi
