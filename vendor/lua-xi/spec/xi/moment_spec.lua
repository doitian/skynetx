describe("moment", function()
  local moment = require 'xi.moment'

  describe("parse", function()
    it("parses 1970-01-01", function()
      local m = moment.parse("1970-01-01")
      assert.equal(- moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(0, m.hour)
    end)
    it("parses 19700101", function()
      local m = moment.parse("19700101")
      assert.equal(- moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(0, m.hour)
    end)
    it("parses 1970-01-01Z", function()
      local m = moment.parse("1970-01-01Z")
      assert.equal(0, m.time)
      assert.equal(0, m.tz)
      assert.equal(0, m.hour)
    end)

    it("parses 1970-01-01 08:01", function()
      local m = moment.parse("1970-01-01 08:01")
      assert.equal(28860 - moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(8, m.hour)
      assert.equal(1, m.min)
    end)

    it("parses 1970-01-01 08:01:01", function()
      local m = moment.parse("1970-01-01 08:01:01")
      assert.equal(28861 - moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(8, m.hour)
    end)

    it("parses 1970-01-01T08:01:01", function()
      local m = moment.parse("1970-01-01T08:01:01")
      assert.equal(28861 - moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(8, m.hour)
    end)

    it("parses 1970-01-01 080101", function()
      local m = moment.parse("1970-01-01 080101")
      assert.equal(28861 - moment.system_tz, m.time)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(8, m.hour)
    end)

    it("parses 1970-01-01T08:01Z", function()
      local m = moment.parse("1970-01-01T08:01Z")
      assert.equal(28860, m.time)
      assert.equal(0, m.tz)
      assert.equal(8, m.hour)
    end)

    it("parses 1970-01-01T08:01:01Z", function()
      local m = moment.parse("1970-01-01T08:01:01Z")
      assert.equal(28861, m.time)
      assert.equal(0, m.tz)
      assert.equal(8, m.hour)
    end)

    it("parses 1970-01-01T08:01:01+0800", function()
      local m = moment.parse("1970-01-01T08:01:01+0800")
      assert.equal(61, m.time)
      assert.equal(28800, m.tz)
      assert.equal(8, m.hour)
      assert.equal(1, m.min)
    end)

    it("parses 1970-01-01T09:01:01+0900", function()
      local m = moment.parse("1970-01-01T09:01:01+0900")
      assert.equal(61, m.time)
      assert.equal(32400, m.tz)
      assert.equal(9, m.hour)
      assert.equal(1, m.min)
    end)

    it("returns itself", function()
      if moment.system_tz == 3600 then
        assert.equal("2016-12-01T09:01:01-0100", tostring(moment.parse("2016-12-01T09:01:01-0100")))
      else
        assert.equal("2016-12-01T09:01:01+0100", tostring(moment.parse("2016-12-01T09:01:01+0100")))
      end
    end)
  end)

  describe("at", function()
    it("converts unix timestamp to local time", function()
      local m = moment.at(0)
      assert.equal(moment.system_tz, m.tz)
      assert.equal(0, m.time)
      assert.equal(math.floor((86400 + moment.system_tz) / 3600) % 24, m.hour)
      assert.equal(math.floor((86400 + moment.system_tz) % 60), m.sec)
    end)

    it("converts unix timestamp to UTC", function()
      local m = moment.at(0, 0)
      assert.equal(0, m.tz)
      assert.equal(0, m.time)
      assert.equal(0, m.hour)
      assert.equal(0, m.sec)
    end)

    it("converts unix timestamp to time in +0900", function()
      local m = moment.at(0, 32400)
      assert.equal(32400, m.tz)
      assert.equal(0, m.time)
      assert.equal(9, m.hour)
      assert.equal(0, m.sec)
    end)
  end)

  describe("now", function()
    local timefunc
    before_each(function()
      timefunc = moment.configure('time', function()
        return 1
      end)
    end)
    after_each(function()
      moment.configure('time', timefunc)
    end)

    it("returns current local time", function()
      local m = moment.now()
      assert.equal(moment.system_tz, m.tz)
      assert.equal(1, m.time)
      assert.equal(math.floor((86400 + moment.system_tz) / 3600) % 24, m.hour)
      assert.equal((86400 + moment.system_tz) % 60 + 1, m.sec)
    end)
  end)

  describe("utc", function()
    local timefunc
    before_each(function()
      timefunc = moment.configure('time', function()
        return 1
      end)
    end)
    after_each(function()
      moment.configure('time', timefunc)
    end)

    it("returns current utc time", function()
      local m = moment.utc()
      assert.equal(0, m.tz)
      assert.equal(1, m.time)
      assert.equal(0, m.hour)
      assert.equal(1, m.sec)
    end)

    it("converts unix timestamp to UTC", function()
      local m = moment.utc(0)
      assert.equal(0, m.tz)
      assert.equal(0, m.time)
      assert.equal(0, m.hour)
      assert.equal(0, m.sec)
    end)
  end)

  describe("__tostring", function()
    it("returns local iso 8601 string", function()
      assert.equal(tostring(moment.utc(86400 + moment.system_tz)):gsub('Z', ''), tostring(moment.at(86400)):gsub('Z', ''))
    end)
    it("returns UTC iso 8601 string", function()
      assert.equal("1970-01-01T00:00:00Z", tostring(moment.utc(0)))
    end)
  end)

  describe("__add", function()
    it("adds seconds to time", function()
      assert.equal("1970-01-01T00:00:01Z", tostring(moment.utc(0) + 1))
    end)
  end)

  describe("__sub", function()
    it("subs seconds from time", function()
      assert.equal("1970-01-01T00:00:01Z", tostring(moment.utc(2) - 1))
    end)
    it("computes diff between twwo times", function()
      assert.equal(1, moment.at(2) - moment.at(1))
      assert.equal(1, moment.utc(2) - moment.at(1))
    end)
  end)

  describe("comparision", function()
    it("compair local times", function()
      assert.truthy(moment.at(1) < moment.at(2))
      assert.truthy(moment.at(2) > moment.at(1))
      assert.truthy(moment.at(1) <= moment.at(2))
      assert.truthy(moment.at(1) <= moment.at(1))
      assert.truthy(moment.at(2) >= moment.at(1))
      assert.truthy(moment.at(2) >= moment.at(2))

      assert.truthy(moment.at(1) == moment.at(1))
      assert.truthy(moment.at(1) ~= moment.at(2))

      assert.falsy(moment.at(1) > moment.at(2))
      assert.falsy(moment.at(2) < moment.at(1))
      assert.falsy(moment.at(1) >= moment.at(2))
      assert.falsy(moment.at(2) <= moment.at(1))

      assert.falsy(moment.at(1) ~= moment.at(1))
      assert.falsy(moment.at(1) == moment.at(2))
    end)

    it("compair UTC times", function()
      assert.truthy(moment.utc(1) < moment.utc(2))
      assert.truthy(moment.utc(2) > moment.utc(1))
      assert.truthy(moment.utc(1) <= moment.utc(2))
      assert.truthy(moment.utc(1) <= moment.utc(1))
      assert.truthy(moment.utc(2) >= moment.utc(1))
      assert.truthy(moment.utc(2) >= moment.utc(2))

      assert.truthy(moment.utc(1) == moment.utc(1))
      assert.truthy(moment.utc(1) ~= moment.utc(2))

      assert.falsy(moment.utc(1) > moment.utc(2))
      assert.falsy(moment.utc(2) < moment.utc(1))
      assert.falsy(moment.utc(1) >= moment.utc(2))
      assert.falsy(moment.utc(2) <= moment.utc(1))

      assert.falsy(moment.utc(1) ~= moment.utc(1))
      assert.falsy(moment.utc(1) == moment.utc(2))
    end)

    it("compair local and UTC times", function()
      assert.truthy(moment.at(1) < moment.utc(2))
      assert.truthy(moment.at(2) > moment.utc(1))
      assert.truthy(moment.at(1) <= moment.utc(2))
      assert.truthy(moment.at(1) <= moment.utc(1))
      assert.truthy(moment.at(2) >= moment.utc(1))
      assert.truthy(moment.at(2) >= moment.utc(2))

      assert.truthy(moment.at(1) == moment.utc(1))
      assert.truthy(moment.at(1) ~= moment.utc(2))

      assert.falsy(moment.at(1) > moment.utc(2))
      assert.falsy(moment.at(2) < moment.utc(1))
      assert.falsy(moment.at(1) >= moment.utc(2))
      assert.falsy(moment.at(2) <= moment.utc(1))

      assert.falsy(moment.at(1) ~= moment.utc(1))
      assert.falsy(moment.at(1) == moment.utc(2))
    end)
  end)

  describe("to_utc", function()
    it("untouches utc time", function()
      local m = moment.utc(0):to_utc()
      assert.equal(0, m.tz)
      assert.equal(0, m.hour)
    end)
    it("converts local time to utc time", function()
      local m = moment.at(0):to_utc()
      assert.equal(0, m.tz)
      assert.equal(0, m.hour)
    end)
  end)
  describe("to_local", function()
    it("untouches local time", function()
      local m = moment.at(86400):to_local()
      assert.equal(moment.system_tz, m.tz)
      if moment.system_tz > 0 then
        assert.equal(math.floor((86400 + moment.system_tz) / 3600) % 24, m.hour)
      end
    end)
    it("converts local time to utc time", function()
      local m = moment.utc(86400):to_local()
      assert.equal(moment.system_tz, m.tz)
      if moment.system_tz > 0 then
        assert.equal(math.floor((86400 + moment.system_tz) / 3600) % 24, m.hour)
      end
    end)
  end)

  describe("from_date", function()
    it("preserves timezone", function()
      local Z = moment.system_tz == 0 and 'Z' or ''
      assert.equal("2016-12-01T09:01:01" .. Z, tostring(moment.from_date({year = 2016, month = 12, day = 1, hour = 9, min = 1, sec = 1})))
      if moment.system_tz == 3600 then
        assert.equal("2016-12-01T09:01:01-0100", tostring(moment.from_date({year = 2016, month = 12, day = 1, hour = 9, min = 1, sec = 1, tz = -3600})))
      else
        assert.equal("2016-12-01T09:01:01+0100", tostring(moment.from_date({year = 2016, month = 12, day = 1, hour = 9, min = 1, sec = 1, tz = 3600})))
      end
    end)
  end)
end)
